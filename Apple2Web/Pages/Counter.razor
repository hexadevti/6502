@page "/counter"
@using System.Text
@using System;
@using System.Diagnostics.CodeAnalysis;
@using System.Drawing;
@using System.Reflection;
@using Runtime;
@using Runtime.Overlays;


<PageTitle>Apple2</PageTitle>

<h1>Apple2</h1>

<div>@console</div>

<button class="btn btn-primary" @onclick="Power">Power</button>

@code {
    private int currentCount = 0;

    private string console = "";
    public Runtime.State state = new Runtime.State();
    public Memory memory;

    protected override async Task OnInitializedAsync()
    {
        memory = new Runtime.Memory(state);
        CPU cpu;
        object lockObj = new object();
        
        bool running = true;

        string? assemblyPath = "/Users/lucianofaria/Desktop/Projects/6502/ConsoleApp/bin/Debug/net8.0/";

        
        memory.LoadROM(0xf800, File.ReadAllBytes("ApplesoftF800.rom"));
        memory.LoadROM(0xf000, File.ReadAllBytes("ApplesoftF000.rom"));
        memory.LoadROM(0xe800, File.ReadAllBytes("ApplesoftE800.rom"));
        memory.LoadROM(0xe000, File.ReadAllBytes("ApplesoftE000.rom"));
        memory.LoadROM(0xd800, File.ReadAllBytes("ApplesoftD800.rom"));
        memory.LoadROM(0xd000, File.ReadAllBytes("ApplesoftD000.rom"));

        memory.RegisterOverlay(new KeyboardOvl());
        memory.RegisterOverlay(new CpuSoftswitchesOvl());
        memory.RegisterOverlay(new SlotsSoftSwitchesOvl());
        memory.RegisterOverlay(new EmptySlot1Ovl());
        memory.RegisterOverlay(new EmptySlot2Ovl());
        memory.RegisterOverlay(new EmptySlot3Ovl());
        memory.RegisterOverlay(new EmptySlot4Ovl());
        memory.RegisterOverlay(new EmptySlot5Ovl());
        memory.RegisterOverlay(new DiskIISlot6Ovl());
        memory.RegisterOverlay(new EmptySlot7Ovl());

        memory.drive1 = new DiskDrive(assemblyPath + "roms/EMPTY DOS33.dsk", memory);
        memory.drive2 = new DiskDrive(assemblyPath + "roms/EMPTY DOS33.dsk", memory);


        List<Task> threads = new List<Task>();
        cpu = new CPU(state, memory, false);
        cpu.Reset();
        
        


        threads.Add(Task.Run(() =>
        {
            while (running)
            {
                cpu.RunCycle();
            }
        }));
        threads.Add(Task.Run(() =>
        {
            while (running)
            {
                cpu.RefreshScreen();
                Thread.Sleep(10);
            }
        }));
        threads.Add(Task.Run(() =>
        {
            while (running)
            {
                cpu.Keyboard();
                Thread.Sleep(10);
            }
        }));

        Task.WaitAll(threads.ToArray());
    }

    public void RefreshScreen()
    {
        console = "";

        var cursorH = memory.baseRAM[0x24];
        var cursorV = memory.baseRAM[0x25];

        StringBuilder output = new StringBuilder();

        int posH = 0;
        int posV = 0;

        for (int b = 0; b < 3; b++)
        {
            posV = b * 8;
            for (int l = 0; l < 8; l++)
            {

                for (ushort c = 0; c < 0x28; c++)
                {
                    posH = c;

                    var chr = memory.baseRAM[(ushort)(0x400 + (b * 0x28) + (l * 0x80) + c)];
                    chr = (byte)(chr & 0b01111111);
                    if (posV == cursorV && posH == cursorH)
                        chr = DateTime.Now.Millisecond > 500 ? chr : (byte)95;

                    if (chr == 96)
                        chr = DateTime.Now.Millisecond > 500 ? (byte)32 : (byte)95;
                    output.Append(Encoding.ASCII.GetString(new[] { chr }));

                }
                posV = posV + 1;
                output.Append("\n");
            }
        }

        console = output.ToString();
    }
    private void Power()
    {
        console = "Powered on!!!";
    }    
}
